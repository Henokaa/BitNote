{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Henok\\\\Desktop\\\\2nd yr 2sem\\\\My website\\\\myapp\\\\src\\\\components\\\\Application.jsx\";\nimport React, { Component } from 'react';\nimport firestore from '../firebase';\nimport Posts from './Posts';\nimport 'firebase/firestore';\nimport firebase from \"firebase/app\";\nimport collectIdsAndDocs from \"/utilities\";\n\nclass Application extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [// {\n        //   id: '1',\n        //   title: 'A Very Hot Take',\n        //   content:\n        //     'Lorem, ipsum dolor sit amet consectetur adipisicing elit. Perferendis suscipit repellendus modi unde cumque, fugit in ad necessitatibus eos sed quasi et! Commodi repudiandae tempora ipsum fugiat. Quam, officia excepturi!',\n        //   user: {\n        //     uid: '123',\n        //     displayName: 'Bill Murray',\n        //     email: 'billmurray@mailinator.com',\n        //     photoURL: 'https://www.fillmurray.com/300/300',\n        //   },\n        //   stars: 1,\n        //   comments: 47,\n        // },\n      ]\n    };\n\n    this.componentDidMount = async () => {\n      // is executed after the first render only on the client side. \n      //This is where AJAX requests and DOM or state updates should occur.\n      const firestore = firebase.firestore(); // its using promises, and this will wait for the promise to resolve, and then it will go into that snapshot object\n\n      const snapshot = await firestore.collection('posts').get(); //  snapshot.forEach(doc => { // getting data from the firebase cloud database\n      //    const id = doc.id;\n      //    const data = doc.data();\n      //    console.log({ id, data });\n      //  });\n\n      const posts = snapshot.docs.map(doc => {\n        return {\n          id: doc.id,\n          ...doc.data()\n        };\n      });\n      this.setState({\n        posts\n      });\n      console.log({\n        snapshot\n      });\n    };\n\n    this.handleCreate = async post => {\n      // handlecreate is the function & post  is the parameter\n      const {\n        posts\n      } = this.state;\n      const docRef = await firestore.collection('posts').add(post);\n      const doc = await docRef.get();\n      const newPost = collectIdsAndDocs(doc);\n      this.setState({\n        posts: [post, ...posts]\n      });\n    };\n  }\n\n  render() {\n    const {\n      posts\n    } = this.state; // onCreate() which triigers when new data is created in realtime Database.\n\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"Application\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Think Piece\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Posts, {\n        posts: posts,\n        onCreate: this.handleCreate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Application;","map":{"version":3,"sources":["C:/Users/Henok/Desktop/2nd yr 2sem/My website/myapp/src/components/Application.jsx"],"names":["React","Component","firestore","Posts","firebase","collectIdsAndDocs","Application","state","posts","componentDidMount","snapshot","collection","get","docs","map","doc","id","data","setState","console","log","handleCreate","post","docRef","add","newPost","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,iBAAP,MAA8B,YAA9B;;AAEA,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAClCM,KADkC,GAC1B;AACNC,MAAAA,KAAK,EAAE,CACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdK;AADD,KAD0B;;AAAA,SAmBlCC,iBAnBkC,GAmBd,YAAY;AAAE;AAChC;AACA,YAAMP,SAAS,GAAGE,QAAQ,CAACF,SAAT,EAAlB,CAF8B,CAEW;;AACxC,YAAMQ,QAAQ,GAAG,MAAMR,SAAS,CAACS,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,EAAvB,CAH6B,CAI9B;AACA;AACA;AACA;AACA;;AACA,YAAMJ,KAAK,GAAGE,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAkBC,GAAG,IAAI;AAAE,eAAO;AAAEC,UAAAA,EAAE,EAAED,GAAG,CAACC,EAAV;AAAc,aAAGD,GAAG,CAACE,IAAJ;AAAjB,SAAP;AAAuC,OAAlE,CAAd;AACA,WAAKC,QAAL,CAAc;AAAEV,QAAAA;AAAF,OAAd;AAEAW,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEV,QAAAA;AAAF,OAAZ;AACD,KAhCiC;;AAAA,SAkClCW,YAlCkC,GAkCnB,MAAMC,IAAN,IAAc;AAAI;AAC/B,YAAM;AAAEd,QAAAA;AAAF,UAAY,KAAKD,KAAvB;AACA,YAAMgB,MAAM,GAAG,MAAMrB,SAAS,CAACS,UAAV,CAAqB,OAArB,EAA8Ba,GAA9B,CAAkCF,IAAlC,CAArB;AACA,YAAMP,GAAG,GAAG,MAAMQ,MAAM,CAACX,GAAP,EAAlB;AACA,YAAMa,OAAO,GAAGpB,iBAAiB,CAACU,GAAD,CAAjC;AAEA,WAAKG,QAAL,CAAc;AAAEV,QAAAA,KAAK,EAAE,CAACc,IAAD,EAAO,GAAGd,KAAV;AAAT,OAAd;AACD,KAzCiC;AAAA;;AA2ClCkB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAElB,MAAAA;AAAF,QAAY,KAAKD,KAAvB,CADO,CACwB;;AAC/B,wBACE;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEC,KAAd;AAAqB,QAAA,QAAQ,EAAE,KAAKa;AAApC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAnDiC;;AAsDpC,eAAef,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport firestore from '../firebase';\nimport Posts from './Posts';\nimport 'firebase/firestore';\nimport firebase from \"firebase/app\";\nimport collectIdsAndDocs from \"/utilities\";\n\nclass Application extends Component {\n  state = {\n    posts: [\n      // {\n      //   id: '1',\n      //   title: 'A Very Hot Take',\n      //   content:\n      //     'Lorem, ipsum dolor sit amet consectetur adipisicing elit. Perferendis suscipit repellendus modi unde cumque, fugit in ad necessitatibus eos sed quasi et! Commodi repudiandae tempora ipsum fugiat. Quam, officia excepturi!',\n      //   user: {\n      //     uid: '123',\n      //     displayName: 'Bill Murray',\n      //     email: 'billmurray@mailinator.com',\n      //     photoURL: 'https://www.fillmurray.com/300/300',\n      //   },\n      //   stars: 1,\n      //   comments: 47,\n      // },\n    ],\n  };\n  componentDidMount = async () => { // is executed after the first render only on the client side. \n    //This is where AJAX requests and DOM or state updates should occur.\n    const firestore = firebase.firestore();  // its using promises, and this will wait for the promise to resolve, and then it will go into that snapshot object\n     const snapshot = await firestore.collection('posts').get();\n    //  snapshot.forEach(doc => { // getting data from the firebase cloud database\n    //    const id = doc.id;\n    //    const data = doc.data();\n    //    console.log({ id, data });\n    //  });\n    const posts = snapshot.docs.map(doc => { return { id: doc.id, ...doc.data() }; });\n    this.setState({ posts });\n\n    console.log({ snapshot });\n  }\n\n  handleCreate = async post => {   // handlecreate is the function & post  is the parameter\n    const { posts } = this.state;\n    const docRef = await firestore.collection('posts').add(post);\n    const doc = await docRef.get();\n    const newPost = collectIdsAndDocs(doc);\n\n    this.setState({ posts: [post, ...posts] });\n  };\n\n  render() {\n    const { posts } = this.state;  // onCreate() which triigers when new data is created in realtime Database.\n    return (\n      <main className=\"Application\">\n        <h1>Think Piece</h1>\n        <Posts posts={posts} onCreate={this.handleCreate} />     \n      </main>\n    );\n  }\n}\n\nexport default Application;\n"]},"metadata":{},"sourceType":"module"}