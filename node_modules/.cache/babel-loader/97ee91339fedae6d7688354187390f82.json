{"ast":null,"code":"\"use strict\";\n\nvar getYoutubeSubtitleUrl = require('@joegesualdo/get-youtube-subtitle-url-node').default;\n\nvar reqwest = require('reqwest');\n\nvar vttToJson = require('vtt-to-json');\n\nfunction getYoutubeSubtitles(id, options) {\n  let type = options.type || 'either';\n  return new Promise((resolve, reject) => {\n    if (type === 'nonauto') {\n      getYoutubeSubtitleUrl(id, {\n        type: 'nonauto'\n      }).then(result => {\n        reqwest(result.url, function (resp) {\n          vttToJson(resp).then(nonAutoSubtitles => {\n            getYoutubeSubtitleUrl(id, {\n              type: 'auto'\n            }).then(result => {\n              reqwest(result.url, function (resp) {\n                vttToJson(resp).then(autoSubtitles => {\n                  autoSubtitles.forEach(autoSection => {\n                    autoSection.words.forEach(autoWord => {\n                      let a_ids = [];\n                      nonAutoSubtitles.forEach((section, id) => {\n                        if (autoWord.time >= section.start && autoWord.time <= section.end) {\n                          a_ids.push(id);\n                        }\n                      });\n\n                      if (a_ids.length > 0) {\n                        a_ids.forEach(a_id => {\n                          var s = nonAutoSubtitles[a_id].words.map(w => {\n                            return w.word;\n                          });\n\n                          if (s.indexOf(autoWord.word) == -1) {\n                            if (nonAutoSubtitles[a_id - 0]) {}\n                          }\n\n                          nonAutoSubtitles[a_id].words.forEach((word, i) => {\n                            if (word.word.toLowerCase() == autoWord.word.toLowerCase()) {\n                              nonAutoSubtitles[a_id].words[i].time = autoWord.time;\n                            } else {}\n                          });\n                        });\n                      }\n                    });\n                  });\n                  resolve(nonAutoSubtitles);\n                }).catch(err => {\n                  reject(err);\n                });\n              });\n            }).catch(err => {\n              reject(err);\n            });\n          }).catch(err => {\n            reject(err);\n          });\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    } else if (type === 'auto') {\n      getYoutubeSubtitleUrl(id, {\n        type: type\n      }).then(result => {\n        reqwest(result.url, function (resp) {\n          vttToJson(resp).then(json => {\n            resolve(json);\n          }).catch(err => {\n            reject(err);\n          });\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    }\n  });\n}\n\nmodule.exports = getYoutubeSubtitles;","map":{"version":3,"sources":["C:/Users/Henok/Desktop/3D/Front end mmasters/firebase with react V2/BitNote/BitNote/BitNote/node_modules/@joegesualdo/get-youtube-subtitles-node/index.js"],"names":["getYoutubeSubtitleUrl","require","default","reqwest","vttToJson","getYoutubeSubtitles","id","options","type","Promise","resolve","reject","then","result","url","resp","nonAutoSubtitles","autoSubtitles","forEach","autoSection","words","autoWord","a_ids","section","time","start","end","push","length","a_id","s","map","w","word","indexOf","i","toLowerCase","catch","err","json","module","exports"],"mappings":"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","sourcesContent":["\"use strict\"\nvar getYoutubeSubtitleUrl = require('@joegesualdo/get-youtube-subtitle-url-node').default\nvar reqwest = require('reqwest')\nvar vttToJson = require('vtt-to-json');\n\nfunction getYoutubeSubtitles(id, options) {\n  let type = options.type || 'either';\n  return new Promise((resolve, reject) => {\n    if (type === 'nonauto') {\n      getYoutubeSubtitleUrl(id, {type: 'nonauto'})\n      .then((result) => {\n        reqwest(result.url, function (resp) {\n          vttToJson(resp)\n          .then(nonAutoSubtitles => {\n            getYoutubeSubtitleUrl(id, {type: 'auto'})\n            .then((result) => {\n              reqwest(result.url, function (resp) {\n                vttToJson(resp)\n                .then(autoSubtitles => {\n                  autoSubtitles.forEach(autoSection => {\n                    autoSection.words.forEach(autoWord => {\n                      let a_ids = [];\n                      nonAutoSubtitles.forEach((section, id) => {\n                        if(autoWord.time >= (section.start) && autoWord.time <= (section.end)) {\n                          a_ids.push(id)\n                        }\n                      })\n                      if (a_ids.length > 0) {\n                        a_ids.forEach(a_id => {\n                          var s = nonAutoSubtitles[a_id].words.map(w => {\n                            return w.word\n                          })\n                          if (s.indexOf(autoWord.word) == -1){\n                            if (nonAutoSubtitles[a_id - 0]) {\n                            }\n                          }\n                          nonAutoSubtitles[a_id].words.forEach((word, i) => {\n                            if (word.word.toLowerCase() == autoWord.word.toLowerCase()) {\n                              nonAutoSubtitles[a_id].words[i].time = autoWord.time\n                            } else {\n                            }\n                          })\n                        })\n                      }\n                    })\n                  })\n                  resolve(nonAutoSubtitles)\n                })\n                .catch(err => {\n                  reject(err)\n                })\n              })\n            })\n            .catch(err => {\n              reject(err)\n            })\n          })\n          .catch(err => {\n            reject(err)\n          })\n        })\n      })\n      .catch(err => {\n        reject(err)\n      })\n    } else if (type === 'auto') {\n      getYoutubeSubtitleUrl(id, {type: type})\n      .then((result) => {\n        reqwest(result.url, function (resp) {\n          vttToJson(resp)\n          .then(json => {\n            resolve(json)\n          })\n          .catch(err => {\n            reject(err)\n          })\n        })\n      })\n      .catch(err => {\n        reject(err)\n      })\n    }\n  })\n}\n\nmodule.exports = getYoutubeSubtitles;\n"]},"metadata":{},"sourceType":"script"}