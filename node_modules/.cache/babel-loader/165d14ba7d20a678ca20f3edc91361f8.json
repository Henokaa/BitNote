{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Henok\\\\Desktop\\\\2nd yr 2sem\\\\My website\\\\myapp\\\\src\\\\components\\\\Application.jsx\";\nimport React, { Component } from 'react';\nimport firestore from '../firebase';\nimport Posts from './Posts';\nimport 'firebase/firestore';\nimport firebase from \"firebase/app\";\nimport { collectIdsAndDocs } from '../utilities'; //import collectIdsAndDocs from \"../utilities\";\n\nclass Application extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [// {\n        //   id: '1',\n        //   title: 'A Very Hot Take',\n        //   content:\n        //     'Lorem, ipsum dolor sit amet consectetur adipisicing elit. Perferendis suscipit repellendus modi unde cumque, fugit in ad necessitatibus eos sed quasi et! Commodi repudiandae tempora ipsum fugiat. Quam, officia excepturi!',\n        //   user: {\n        //     uid: '123',\n        //     displayName: 'Bill Murray',\n        //     email: 'billmurray@mailinator.com',\n        //     photoURL: 'https://www.fillmurray.com/300/300',\n        //   },\n        //   stars: 1,\n        //   comments: 47,\n        // },\n      ]\n    };\n    this.unscribe = null;\n\n    this.componentDidMount = async () => {\n      //imediately after initial rendering\n      const firestore = firebase.firestore();\n      this.unscribe = firestore.collection(`posts`).onSnapshot(snapshot => {\n        const posts = snapshot.docs.map(collectIdsAndDocs);\n        this.setState({\n          posts\n        });\n      });\n    };\n\n    this.componentWillUnmount = () => {\n      // immediately before removing component from DOM\n      this.unsubscribe();\n    };\n\n    this.handleCreate = async post => {\n      // handlecreate is the function & post  is the parameter\n      const {\n        posts\n      } = this.state;\n      const firestore = firebase.firestore();\n      const docRef = await firestore.collection('posts').add(post);\n      const doc = await docRef.get();\n      const newPost = collectIdsAndDocs(doc);\n      this.setState({\n        posts: [newPost, ...posts]\n      });\n    };\n\n    this.handleRemove = async id => {\n      const firestore = firebase.firestore();\n      const allposts = this.state.posts;\n      await firestore.doc(`posts/${id}`).delete();\n      const posts = allposts.filter(post => post.id !== id);\n      this.setState({\n        posts\n      });\n    };\n  }\n\n  render() {\n    const {\n      posts\n    } = this.state; // onCreate() which triigers when new data is created in realtime Database.\n\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"Application\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BitNotes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Posts, {\n        posts: posts,\n        onCreate: this.handleCreate,\n        onRemove: this.handleRemove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Application;","map":{"version":3,"sources":["C:/Users/Henok/Desktop/2nd yr 2sem/My website/myapp/src/components/Application.jsx"],"names":["React","Component","firestore","Posts","firebase","collectIdsAndDocs","Application","state","posts","unscribe","componentDidMount","collection","onSnapshot","snapshot","docs","map","setState","componentWillUnmount","unsubscribe","handleCreate","post","docRef","add","doc","get","newPost","handleRemove","id","allposts","delete","filter","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,iBAAT,QAAkC,cAAlC,C,CACA;;AAEA,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAClCM,KADkC,GAC1B;AACNC,MAAAA,KAAK,EAAE,CACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdK;AADD,KAD0B;AAAA,SAoBlCC,QApBkC,GAoBvB,IApBuB;;AAAA,SAsBlCC,iBAtBkC,GAsBd,YAAY;AAAK;AACnC,YAAMR,SAAS,GAAGE,QAAQ,CAACF,SAAT,EAAlB;AACA,WAAKO,QAAL,GAAgBP,SAAS,CAACS,UAAV,CAAsB,OAAtB,EAA8BC,UAA9B,CAAyCC,QAAQ,IAAI;AACrE,cAAML,KAAK,GAAGK,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBV,iBAAlB,CAAd;AACA,aAAKW,QAAL,CAAc;AAAER,UAAAA;AAAF,SAAd;AACC,OAHe,CAAhB;AAID,KA5BiC;;AAAA,SA8BjCS,oBA9BiC,GA8BV,MAAM;AAAE;AAC5B,WAAKC,WAAL;AACD,KAhC+B;;AAAA,SAgDlCC,YAhDkC,GAgDnB,MAAMC,IAAN,IAAc;AAAI;AAC/B,YAAM;AAAEZ,QAAAA;AAAF,UAAY,KAAKD,KAAvB;AACA,YAAML,SAAS,GAAGE,QAAQ,CAACF,SAAT,EAAlB;AACA,YAAMmB,MAAM,GAAG,MAAMnB,SAAS,CAACS,UAAV,CAAqB,OAArB,EAA8BW,GAA9B,CAAkCF,IAAlC,CAArB;AACA,YAAMG,GAAG,GAAG,MAAMF,MAAM,CAACG,GAAP,EAAlB;AACA,YAAMC,OAAO,GAAGpB,iBAAiB,CAACkB,GAAD,CAAjC;AAEA,WAAKP,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAE,CAACiB,OAAD,EAAU,GAAGjB,KAAb;AAAT,OAAd;AACD,KAxDiC;;AAAA,SA0DlCkB,YA1DkC,GA0DnB,MAAOC,EAAP,IAAc;AAC3B,YAAMzB,SAAS,GAAGE,QAAQ,CAACF,SAAT,EAAlB;AACA,YAAM0B,QAAQ,GAAG,KAAKrB,KAAL,CAAWC,KAA5B;AACA,YAAMN,SAAS,CAACqB,GAAV,CAAe,SAAQI,EAAG,EAA1B,EAA6BE,MAA7B,EAAN;AACA,YAAMrB,KAAK,GAAGoB,QAAQ,CAACE,MAAT,CAAgBV,IAAI,IAAIA,IAAI,CAACO,EAAL,KAAYA,EAApC,CAAd;AACA,WAAKX,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACD,KAhEiC;AAAA;;AAkElCuB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEvB,MAAAA;AAAF,QAAY,KAAKD,KAAvB,CADO,CACwB;;AAC/B,wBACE;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACA,QAAA,KAAK,EAAEC,KADP;AAEA,QAAA,QAAQ,EAAE,KAAKW,YAFf;AAGA,QAAA,QAAQ,EAAE,KAAKO;AAHf;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AA9EiC;;AAiFpC,eAAepB,WAAf","sourcesContent":["import React, { Component } from 'react';\nimport firestore from '../firebase';\nimport Posts from './Posts';\nimport 'firebase/firestore';\nimport firebase from \"firebase/app\";\nimport { collectIdsAndDocs } from '../utilities';\n//import collectIdsAndDocs from \"../utilities\";\n\nclass Application extends Component {\n  state = {\n    posts: [\n      // {\n      //   id: '1',\n      //   title: 'A Very Hot Take',\n      //   content:\n      //     'Lorem, ipsum dolor sit amet consectetur adipisicing elit. Perferendis suscipit repellendus modi unde cumque, fugit in ad necessitatibus eos sed quasi et! Commodi repudiandae tempora ipsum fugiat. Quam, officia excepturi!',\n      //   user: {\n      //     uid: '123',\n      //     displayName: 'Bill Murray',\n      //     email: 'billmurray@mailinator.com',\n      //     photoURL: 'https://www.fillmurray.com/300/300',\n      //   },\n      //   stars: 1,\n      //   comments: 47,\n      // },\n    ],\n  };\n\n  unscribe = null;\n\n  componentDidMount = async () => {    //imediately after initial rendering\n    const firestore = firebase.firestore(); \n    this.unscribe = firestore.collection(`posts`).onSnapshot(snapshot => {\n    const posts = snapshot.docs.map(collectIdsAndDocs);\n    this.setState({ posts });\n    });\n  };\n\n   componentWillUnmount = () => { // immediately before removing component from DOM\n      this.unsubscribe();\n    }\n    // is executed after the first render only on the client side. \n    //This is where AJAX requests and DOM or state updates should occur.\n  //   const firestore = firebase.firestore();  // its using promises, and this will wait for the promise to resolve, and then it will go into that snapshot object\n  //    const snapshot = await firestore.collection('posts').get();\n  //   //  snapshot.forEach(doc => { // getting data from the firebase cloud database\n  //   //    const id = doc.id;\n  //   //    const data = doc.data();\n  //   //    console.log({ id, data });\n  //   //  });\n  //   const posts = snapshot.docs.map(collectIdsAndDocs);\n  //   this.setState({ posts });\n\n  //   console.log({ snapshot });\n  // }\n\n  handleCreate = async post => {   // handlecreate is the function & post  is the parameter\n    const { posts } = this.state;\n    const firestore = firebase.firestore();\n    const docRef = await firestore.collection('posts').add(post);\n    const doc = await docRef.get();\n    const newPost = collectIdsAndDocs(doc);\n\n    this.setState({ posts: [newPost, ...posts] });\n  };\n\n  handleRemove = async (id) => {\n    const firestore = firebase.firestore();\n    const allposts = this.state.posts;\n    await firestore.doc(`posts/${id}`).delete();\n    const posts = allposts.filter(post => post.id !== id)\n    this.setState({ posts });\n  };\n\n  render() {\n    const { posts } = this.state;  // onCreate() which triigers when new data is created in realtime Database.\n    return (\n      <main className=\"Application\">\n        <h1>BitNotes</h1>\n        <Posts \n        posts={posts} \n        onCreate={this.handleCreate} \n        onRemove={this.handleRemove} \n        />     \n      </main>\n    );\n  }\n}\n\nexport default Application;\n"]},"metadata":{},"sourceType":"module"}