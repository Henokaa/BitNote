{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\henok\\\\Documents\\\\GitHub\\\\BitNote\\\\src\\\\components\\\\Application.jsx\";\nimport React, { Component } from 'react';\nimport { firestore, auth } from '../firebase';\nimport Posts from './Posts';\nimport 'firebase/firestore';\nimport firebase from \"firebase/app\";\nimport { collectIdsAndDocs } from '../utilities';\nimport Note from './Note'; //import collectIdsAndDocs from \"../utilities\";\n\nclass Application extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      user: null\n    };\n    this.unscribe = null;\n    this.unsubscribeFromAUth = null;\n\n    this.componentDidMount = async () => {\n      //imediately after initial rendering\n      const firestore = firebase.firestore();\n      this.unscribe = firestore.collection(`posts`).onSnapshot(snapshot => {\n        const posts = snapshot.docs.map(collectIdsAndDocs);\n        this.setState({\n          posts\n        });\n      });\n      this.unsubscribeFromAUth = auth.onAuthStateChanged(user => {\n        this.setState({\n          user\n        });\n      });\n    };\n\n    this.componentWillUnmount = () => {\n      // immediately before removing component from DOM\n      this.unsbscribe();\n    };\n\n    this.handleCreate = async post => {\n      // handlecreate is the function & post  is the --p-ar-amet3r\n      const {\n        posts\n      } = this.state;\n      const firestore = firebase.firestore();\n      const docRef = await firestore.collection('posts').add(post);\n      const doc = await docRef.get();\n      const newPost = collectIdsAndDocs(doc);\n      this.setState({\n        posts: [newPost, ...posts]\n      });\n    };\n\n    this.handleRemove = async id => {\n      const firestore = firebase.firestore();\n      const allposts = this.state.posts;\n      await firestore.doc(`posts/${id}`).delete();\n      const posts = allposts.filter(post => post.id !== id);\n      this.setState({\n        posts\n      });\n    };\n  }\n\n  render() {\n    const {\n      posts\n    } = this.state; // onCreate() which triigers when new data is created in realtime Database.\n\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"Application\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BitNotes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Posts, {\n        posts: posts,\n        onCreate: this.handleCreate,\n        onRemove: this.handleRemove,\n        caption: this.props.caption,\n        aaevent: this.props.aaevent,\n        aevent: this.props.aevent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Application;","map":{"version":3,"sources":["C:/Users/henok/Documents/GitHub/BitNote/src/components/Application.jsx"],"names":["React","Component","firestore","auth","Posts","firebase","collectIdsAndDocs","Note","Application","state","posts","user","unscribe","unsubscribeFromAUth","componentDidMount","collection","onSnapshot","snapshot","docs","map","setState","onAuthStateChanged","componentWillUnmount","unsbscribe","handleCreate","post","docRef","add","doc","get","newPost","handleRemove","id","allposts","delete","filter","render","props","caption","aaevent","aevent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,SAAR,EAAkBC,IAAlB,QAA6B,aAA7B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CACA;;AAEA,MAAMC,WAAN,SAA0BP,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAClCQ,KADkC,GAC1B;AACNC,MAAAA,KAAK,EAAE,EADD;AAGNC,MAAAA,IAAI,EAAE;AAHA,KAD0B;AAAA,SAOlCC,QAPkC,GAOvB,IAPuB;AAAA,SAQlCC,mBARkC,GAQZ,IARY;;AAAA,SAUlCC,iBAVkC,GAUd,YAAY;AAAK;AACnC,YAAMZ,SAAS,GAAGG,QAAQ,CAACH,SAAT,EAAlB;AACA,WAAKU,QAAL,GAAgBV,SAAS,CAACa,UAAV,CAAsB,OAAtB,EAA8BC,UAA9B,CAAyCC,QAAQ,IAAI;AACrE,cAAMP,KAAK,GAAGO,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBb,iBAAlB,CAAd;AACA,aAAKc,QAAL,CAAc;AAAEV,UAAAA;AAAF,SAAd;AACC,OAHe,CAAhB;AAIA,WAAKG,mBAAL,GAA2BV,IAAI,CAACkB,kBAAL,CAAwBV,IAAI,IAAI;AACzD,aAAKS,QAAL,CAAc;AAACT,UAAAA;AAAD,SAAd;AACD,OAF0B,CAA3B;AAGD,KAnBiC;;AAAA,SAqBjCW,oBArBiC,GAqBV,MAAM;AAAE;AAC5B,WAAKC,UAAL;AACD,KAvB+B;;AAAA,SAuClCC,YAvCkC,GAuCnB,MAAMC,IAAN,IAAc;AAAS;AACpC,YAAM;AAAEf,QAAAA;AAAF,UAAY,KAAKD,KAAvB;AACA,YAAMP,SAAS,GAAGG,QAAQ,CAACH,SAAT,EAAlB;AACA,YAAMwB,MAAM,GAAG,MAAMxB,SAAS,CAACa,UAAV,CAAqB,OAArB,EAA8BY,GAA9B,CAAkCF,IAAlC,CAArB;AACA,YAAMG,GAAG,GAAG,MAAMF,MAAM,CAACG,GAAP,EAAlB;AACA,YAAMC,OAAO,GAAGxB,iBAAiB,CAACsB,GAAD,CAAjC;AAEA,WAAKR,QAAL,CAAc;AAAEV,QAAAA,KAAK,EAAE,CAACoB,OAAD,EAAU,GAAGpB,KAAb;AAAT,OAAd;AACD,KA/CiC;;AAAA,SAiDlCqB,YAjDkC,GAiDnB,MAAOC,EAAP,IAAc;AAC3B,YAAM9B,SAAS,GAAGG,QAAQ,CAACH,SAAT,EAAlB;AACA,YAAM+B,QAAQ,GAAG,KAAKxB,KAAL,CAAWC,KAA5B;AACA,YAAMR,SAAS,CAAC0B,GAAV,CAAe,SAAQI,EAAG,EAA1B,EAA6BE,MAA7B,EAAN;AACA,YAAMxB,KAAK,GAAGuB,QAAQ,CAACE,MAAT,CAAgBV,IAAI,IAAIA,IAAI,CAACO,EAAL,KAAYA,EAApC,CAAd;AACA,WAAKZ,QAAL,CAAc;AAAEV,QAAAA;AAAF,OAAd;AACD,KAvDiC;AAAA;;AAyDlC0B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE1B,MAAAA;AAAF,QAAY,KAAKD,KAAvB,CADO,CACwB;;AAC/B,wBACE;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACA,QAAA,KAAK,EAAEC,KADP;AAEA,QAAA,QAAQ,EAAE,KAAKc,YAFf;AAGA,QAAA,QAAQ,EAAE,KAAKO,YAHf;AAIA,QAAA,OAAO,EAAE,KAAKM,KAAL,CAAWC,OAJpB;AAKA,QAAA,OAAO,EAAI,KAAKD,KAAL,CAAWE,OALtB;AAMA,QAAA,MAAM,EAAI,KAAKF,KAAL,CAAWG;AANrB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AAxEiC;;AA2EpC,eAAehC,WAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport {firestore,auth} from '../firebase';\r\nimport Posts from './Posts';\r\nimport 'firebase/firestore';\r\nimport firebase from \"firebase/app\";\r\nimport { collectIdsAndDocs } from '../utilities';\r\nimport Note from './Note';\r\n//import collectIdsAndDocs from \"../utilities\";\r\n\r\nclass Application extends Component {\r\n  state = {\r\n    posts: [\r\n    ],\r\n    user: null,\r\n  };\r\n\r\n  unscribe = null; // unsubscribe fro firestore\r\n  unsubscribeFromAUth = null;\r\n\r\n  componentDidMount = async () => {    //imediately after initial rendering\r\n    const firestore = firebase.firestore(); \r\n    this.unscribe = firestore.collection(`posts`).onSnapshot(snapshot => {\r\n    const posts = snapshot.docs.map(collectIdsAndDocs);\r\n    this.setState({ posts });\r\n    });\r\n    this.unsubscribeFromAUth = auth.onAuthStateChanged(user => {\r\n      this.setState({user});\r\n    });\r\n  };\r\n\r\n   componentWillUnmount = () => { // immediately before removing component from DOM\r\n      this.unsbscribe();\r\n    }\r\n    // is executed after the first render only on the client side. \r\n    //This is where AJAX requests and DOM or state updates should occur.\r\n  //   const firestore = firebase.firestore();  // its using promises, and this will wait for the promise to resolve, and then it will go into that snapshot object\r\n  //    const snapshot = await firestore.collection('posts').get();\r\n  //   //  snapshot.forEach(doc => { // getting data from the firebase cloud database\r\n  //   //    const id = doc.id;\r\n  //   //    const data = doc.data();\r\n  //   //    console.log({ id, data });\r\n  //   //  });\r\n  //   const posts = snapshot.docs.map(collectIdsAndDocs);\r\n  //   this.setState({ posts });\r\n\r\n  //   console.log({ snapshot });\r\n  // }\r\n\r\n  handleCreate = async post => {        // handlecreate is the function & post  is the --p-ar-amet3r\r\n    const { posts } = this.state;\r\n    const firestore = firebase.firestore();\r\n    const docRef = await firestore.collection('posts').add(post);\r\n    const doc = await docRef.get();\r\n    const newPost = collectIdsAndDocs(doc);\r\n\r\n    this.setState({ posts: [newPost, ...posts] });\r\n  };\r\n\r\n  handleRemove = async (id) => {\r\n    const firestore = firebase.firestore();\r\n    const allposts = this.state.posts;\r\n    await firestore.doc(`posts/${id}`).delete();\r\n    const posts = allposts.filter(post => post.id !== id)\r\n    this.setState({ posts });\r\n  };\r\n\r\n  render() {\r\n    const { posts } = this.state;  // onCreate() which triigers when new data is created in realtime Database.\r\n    return (\r\n      <main className=\"Application\">\r\n        <h1>BitNotes</h1>\r\n        <Posts \r\n        posts={posts} \r\n        onCreate={this.handleCreate} \r\n        onRemove={this.handleRemove}\r\n        caption={this.props.caption}\r\n        aaevent = {this.props.aaevent}\r\n        aevent = {this.props.aevent}\r\n        />     \r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Application;\r\n"]},"metadata":{},"sourceType":"module"}