{"ast":null,"code":"function convertVttToJson(vttString) {\n  return new Promise((resolve, reject) => {\n    var current = {};\n    var sections = [];\n    var start = false;\n    var vttArray = vttString.split('\\n');\n    vttArray.forEach((line, index) => {\n      if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") === \" \") {} else if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") == \"\") {} else if (line.indexOf('-->') !== -1) {\n        start = true;\n\n        if (current.start) {\n          sections.push(clone(current));\n        }\n\n        current = {\n          start: timeString2ms(line.split(\"-->\")[0].trimRight().split(\" \").pop()),\n          end: timeString2ms(line.split(\"-->\")[1].trimLeft().split(\" \").shift()),\n          part: ''\n        };\n      } else if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") === \"\") {} else if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") === \" \") {} else {\n        if (start) {\n          if (sections.length !== 0) {\n            if (sections[sections.length - 1].part.replace(/<\\/?[^>]+(>|$)/g, \"\") === line.replace(/<\\/?[^>]+(>|$)/g, \"\")) {} else {\n              if (current.part.length === 0) {\n                current.part = line;\n              } else {\n                current.part = `${current.part} ${line}`;\n              } // If it's the last line of the subtitles\n\n\n              if (index === vttArray.length - 1) {\n                sections.push(clone(current));\n              }\n            }\n          } else {\n            current.part = line;\n            sections.push(clone(current));\n            current.part = '';\n          }\n        }\n      }\n    });\n    current = [];\n    var regex = /(<([0-9:.>]+)>)/ig;\n    sections.forEach(section => {\n      strs = section.part.split();\n      var results = strs.map(function (s) {\n        return s.replace(regex, function (n) {\n          return n.split('').reduce(function (s, i) {\n            return `==${n.replace(\"<\", \"\").replace(\">\", \"\")}`;\n          }, 0);\n        });\n      });\n      cleanText = results[0].replace(/<\\/?[^>]+(>|$)/g, \"\");\n      cleanArray = cleanText.split(\" \");\n      resultsArray = [];\n      cleanArray.forEach(function (item) {\n        if (item.indexOf('==') > -1) {\n          var pair = item.split(\"==\");\n          var key = pair[0];\n          var value = pair[1];\n\n          if (key == \"\" || key == \"##\") {\n            return;\n          }\n\n          resultsArray.push({\n            word: cleanWord(item.split(\"==\")[0]),\n            time: timeString2ms(item.split(\"==\")[1])\n          });\n        } else {\n          resultsArray.push({\n            word: cleanWord(item),\n            time: undefined\n          });\n        }\n      });\n      section.words = resultsArray;\n      section.part = section.part.replace(/<\\/?[^>]+(>|$)/g, \"\");\n    });\n    resolve(sections);\n  });\n} // helpers\n//   http://codereview.stackexchange.com/questions/45335/milliseconds-to-time-string-time-string-to-milliseconds\n\n\nfunction timeString2ms(a, b) {\n  // time(HH:MM:SS.mss) // optimized\n  return a = a.split('.'), // optimized\n  b = a[1] * 1 || 0, // optimized\n  a = a[0].split(':'), b + (a[2] ? a[0] * 3600 + a[1] * 60 + a[2] * 1 : a[1] ? a[0] * 60 + a[1] * 1 : a[0] * 1) * 1e3; // optimized\n} // removes everything but characters and apostrophe and dash\n\n\nfunction cleanWord(word) {\n  return word.replace(/[^0-9a-z'-]/gi, '').toLowerCase();\n}\n\nfunction clone(obj) {\n  if (null == obj || \"object\" != typeof obj) return obj;\n  var copy = obj.constructor();\n\n  for (var attr in obj) {\n    if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n  }\n\n  return copy;\n}\n\nmodule.exports = convertVttToJson;","map":{"version":3,"sources":["C:/Users/b/Downloads/Compressed/BitNote-main/node_modules/vtt-to-json/index.js"],"names":["convertVttToJson","vttString","Promise","resolve","reject","current","sections","start","vttArray","split","forEach","line","index","replace","indexOf","push","clone","timeString2ms","trimRight","pop","end","trimLeft","shift","part","length","regex","section","strs","results","map","s","n","reduce","i","cleanText","cleanArray","resultsArray","item","pair","key","value","word","cleanWord","time","undefined","words","a","b","toLowerCase","obj","copy","constructor","attr","hasOwnProperty","module","exports"],"mappings":"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","sourcesContent":["function convertVttToJson(vttString) {\n  return new Promise((resolve, reject) => {\n  var current = {}\n  var sections = []\n  var start = false;\n  var vttArray = vttString.split('\\n');\n   vttArray.forEach((line, index) => {\n    if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") === \" \"){\n    } else if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") == \"\") {\n    } else if (line.indexOf('-->') !== -1 ) {\n      start = true;\n\n      if (current.start) {\n        sections.push(clone(current))\n      }\n\n      current = {\n        start: timeString2ms(line.split(\"-->\")[0].trimRight().split(\" \").pop()),\n        end: timeString2ms(line.split(\"-->\")[1].trimLeft().split(\" \").shift()),\n        part: ''\n      }\n    } else if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") === \"\"){\n    } else if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") === \" \"){\n    } else {\n      if (start){\n        if (sections.length !== 0) {\n          if (sections[sections.length - 1].part.replace(/<\\/?[^>]+(>|$)/g, \"\") === line.replace(/<\\/?[^>]+(>|$)/g, \"\")) {\n          } else {\n            if (current.part.length === 0) {\n              current.part = line\n            } else {\n              current.part = `${current.part} ${line}`\n            }\n            // If it's the last line of the subtitles\n            if (index === vttArray.length - 1) {\n              sections.push(clone(current))\n            }\n          }\n        } else {\n          current.part = line\n          sections.push(clone(current))\n          current.part = ''\n        }\n      }\n    }\n  })\n\n  current = []\n\n  var regex = /(<([0-9:.>]+)>)/ig\n  sections.forEach(section => {\n    strs = section.part.split()\n    var results = strs.map(function(s){\n        return s.replace(regex, function(n){\n          return n.split('').reduce(function(s,i){ return `==${n.replace(\"<\", \"\").replace(\">\", \"\")}` }, 0)\n        })\n    });\n    cleanText = results[0].replace(/<\\/?[^>]+(>|$)/g, \"\");\n    cleanArray = cleanText.split(\" \")\n    resultsArray = [];\n    cleanArray.forEach(function(item){\n      if (item.indexOf('==') > -1) {\n        var pair = item.split(\"==\")\n        var key = pair[0]\n        var value = pair[1]\n        if(key == \"\" || key == \"##\") {\n          return;\n        }\n        resultsArray.push({\n          word: cleanWord(item.split(\"==\")[0]),\n          time: timeString2ms(item.split(\"==\")[1]),\n        })\n      } else {\n        resultsArray.push({\n          word: cleanWord(item),\n          time: undefined,\n        })\n      }\n    })\n    section.words = resultsArray;\n    section.part = section.part.replace(/<\\/?[^>]+(>|$)/g, \"\")\n  })\n    resolve(sections);\n  })\n}\n\n// helpers\n//   http://codereview.stackexchange.com/questions/45335/milliseconds-to-time-string-time-string-to-milliseconds\nfunction timeString2ms(a,b){// time(HH:MM:SS.mss) // optimized\n return a=a.split('.'), // optimized\n  b=a[1]*1||0, // optimized\n  a=a[0].split(':'),\n  b+(a[2]?a[0]*3600+a[1]*60+a[2]*1:a[1]?a[0]*60+a[1]*1:a[0]*1)*1e3 // optimized\n}\n\n// removes everything but characters and apostrophe and dash\nfunction cleanWord(word) {\n  return word.replace(/[^0-9a-z'-]/gi, '').toLowerCase()\n}\n\nfunction clone(obj) {\n    if (null == obj || \"object\" != typeof obj) return obj;\n    var copy = obj.constructor();\n    for (var attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n    }\n    return copy;\n}\n\n\nmodule.exports = convertVttToJson;\n"]},"metadata":{},"sourceType":"script"}