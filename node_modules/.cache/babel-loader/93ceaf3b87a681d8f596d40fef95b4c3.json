{"ast":null,"code":"/* eslint-env browser */\nvar assert = require('assert'); // just so it doesn't show up in automated searches\n\n\nvar DEFAULT_KEY = atob('QUl6YVN5QjBRNGdUaG1zMkp0LTZTZ01ZajR1ZFlLZlZmWE5zcmNj');\n\nmodule.exports = function getVideoTitle(id, key, cb) {\n  if (typeof key === 'function') {\n    cb = key;\n    key = DEFAULT_KEY;\n  }\n\n  assert(typeof id === 'string', 'get-youtube-title: id must be string');\n  assert(typeof key === 'string', 'get-youtube-title: key must be string');\n  assert(typeof cb === 'function', 'get-youtube-title: callback must be a function');\n  var url = 'https://www.googleapis.com/youtube/v3/videos?key=' + encodeURIComponent(key) + '&part=snippet&id=' + encodeURIComponent(id);\n  var xhr = new XMLHttpRequest();\n  xhr.open('get', url);\n\n  xhr.onload = function () {\n    try {\n      var json = JSON.parse(xhr.responseText);\n    } catch (err) {\n      return cb(err);\n    }\n\n    if (json.error) return cb(json.error);\n    if (json.items.length === 0) return cb(new Error('Not found'));\n    cb(null, json.items[0].snippet.title);\n  };\n\n  xhr.onerror = function () {\n    cb(new Error('Error contacting the YouTube API'));\n  };\n\n  xhr.onabort = function () {\n    cb(new Error('Aborted'));\n  };\n\n  xhr.send();\n};","map":{"version":3,"sources":["C:/Users/henok/Documents/GitHub/BitNote/node_modules/get-youtube-title/browser.js"],"names":["assert","require","DEFAULT_KEY","atob","module","exports","getVideoTitle","id","key","cb","url","encodeURIComponent","xhr","XMLHttpRequest","open","onload","json","JSON","parse","responseText","err","error","items","length","Error","snippet","title","onerror","onabort","send"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB,C,CAEA;;;AACA,IAAIC,WAAW,GAAGC,IAAI,CAAC,sDAAD,CAAtB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAwBC,EAAxB,EAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AACpD,MAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7BC,IAAAA,EAAE,GAAGD,GAAL;AACAA,IAAAA,GAAG,GAAGN,WAAN;AACD;;AAEDF,EAAAA,MAAM,CAAC,OAAOO,EAAP,KAAc,QAAf,EAAyB,sCAAzB,CAAN;AACAP,EAAAA,MAAM,CAAC,OAAOQ,GAAP,KAAe,QAAhB,EAA0B,uCAA1B,CAAN;AACAR,EAAAA,MAAM,CAAC,OAAOS,EAAP,KAAc,UAAf,EAA2B,gDAA3B,CAAN;AAEA,MAAIC,GAAG,GAAG,sDAAsDC,kBAAkB,CAACH,GAAD,CAAxE,GAAgF,mBAAhF,GAAsGG,kBAAkB,CAACJ,EAAD,CAAlI;AAEA,MAAIK,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,EAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBJ,GAAhB;;AAEAE,EAAAA,GAAG,CAACG,MAAJ,GAAa,YAAY;AACvB,QAAI;AAAE,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWN,GAAG,CAACO,YAAf,CAAX;AAAyC,KAA/C,CAAgD,OAAOC,GAAP,EAAY;AAAE,aAAOX,EAAE,CAACW,GAAD,CAAT;AAAgB;;AAC9E,QAAIJ,IAAI,CAACK,KAAT,EAAgB,OAAOZ,EAAE,CAACO,IAAI,CAACK,KAAN,CAAT;AAChB,QAAIL,IAAI,CAACM,KAAL,CAAWC,MAAX,KAAsB,CAA1B,EAA6B,OAAOd,EAAE,CAAC,IAAIe,KAAJ,CAAU,WAAV,CAAD,CAAT;AAC7Bf,IAAAA,EAAE,CAAC,IAAD,EAAOO,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcG,OAAd,CAAsBC,KAA7B,CAAF;AACD,GALD;;AAMAd,EAAAA,GAAG,CAACe,OAAJ,GAAc,YAAY;AACxBlB,IAAAA,EAAE,CAAC,IAAIe,KAAJ,CAAU,kCAAV,CAAD,CAAF;AACD,GAFD;;AAGAZ,EAAAA,GAAG,CAACgB,OAAJ,GAAc,YAAY;AACxBnB,IAAAA,EAAE,CAAC,IAAIe,KAAJ,CAAU,SAAV,CAAD,CAAF;AACD,GAFD;;AAIAZ,EAAAA,GAAG,CAACiB,IAAJ;AACD,CA7BD","sourcesContent":["/* eslint-env browser */\r\nvar assert = require('assert')\r\n\r\n// just so it doesn't show up in automated searches\r\nvar DEFAULT_KEY = atob('QUl6YVN5QjBRNGdUaG1zMkp0LTZTZ01ZajR1ZFlLZlZmWE5zcmNj')\r\n\r\nmodule.exports = function getVideoTitle (id, key, cb) {\r\n  if (typeof key === 'function') {\r\n    cb = key\r\n    key = DEFAULT_KEY\r\n  }\r\n\r\n  assert(typeof id === 'string', 'get-youtube-title: id must be string')\r\n  assert(typeof key === 'string', 'get-youtube-title: key must be string')\r\n  assert(typeof cb === 'function', 'get-youtube-title: callback must be a function')\r\n\r\n  var url = 'https://www.googleapis.com/youtube/v3/videos?key=' + encodeURIComponent(key) + '&part=snippet&id=' + encodeURIComponent(id)\r\n\r\n  var xhr = new XMLHttpRequest()\r\n  xhr.open('get', url)\r\n\r\n  xhr.onload = function () {\r\n    try { var json = JSON.parse(xhr.responseText) } catch (err) { return cb(err) }\r\n    if (json.error) return cb(json.error)\r\n    if (json.items.length === 0) return cb(new Error('Not found'))\r\n    cb(null, json.items[0].snippet.title)\r\n  }\r\n  xhr.onerror = function () {\r\n    cb(new Error('Error contacting the YouTube API'))\r\n  }\r\n  xhr.onabort = function () {\r\n    cb(new Error('Aborted'))\r\n  }\r\n\r\n  xhr.send()\r\n}\r\n"]},"metadata":{},"sourceType":"script"}